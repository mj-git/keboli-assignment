{"version":3,"sources":["components/Widget.js","App.js","Login.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","display","justifyContent","bullet","margin","transform","title","fontSize","square","color","backgroundColor","deepOrange","pos","marginBottom","Widget","primaryText","secondaryText","count","classes","Card","className","CardContent","Avatar","variant","Typography","component","toUpperCase","defaultProps","theme","root","maxHeight","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","toolbar","mixins","drawerPaper","paper","padding","textAlign","palette","text","secondary","content","flexGrow","widgetGrid","overflow","tableHeader","withAuth","Component","props","container","useTheme","React","useState","mobileOpen","setMobileOpen","page","setPage","rowsPerPage","setRowsPerPage","rows","setRows","widgetData","setWidgetData","useEffect","a","async","fetch","response","json","data","getData","key","widgetRows","length","group","reduce","rv","x","push","r","Object","keys","map","g","concat","handleDrawerToggle","Divider","List","icon","action","sessionStorage","removeItem","window","location","href","ListItem","button","onClick","ListItemIcon","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","ModalProps","keepMounted","xsDown","Grid","index","item","xs","Paper","Table","table","TableHead","TableRow","TableCell","align","TableBody","slice","row","name","scope","candidateId","domain","yearOfExperience","recruiterName","interviewType","TableFooter","TablePagination","colSpan","rowsPerPageOptions","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","token","setToken","getItem","Copyright","Link","Date","getFullYear","marginTop","flexDirection","alignItems","avatar","main","form","submit","Boolean","hostname","match","routing","basename","exact","path","App","username","setUsername","password","setPassword","error","setError","Container","maxWidth","noValidate","TextField","required","fullWidth","id","label","autoFocus","onChange","e","type","autoComplete","Button","preventDefault","setItem","Box","mt","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11904074.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropTypes from 'prop-types';\r\nimport Card from '@material-ui/core/Card';\r\nimport { CardContent, Typography, Avatar } from '@material-ui/core';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    //minWidth: 275\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)'\r\n  },\r\n  title: {\r\n    fontSize: 14\r\n  },\r\n  square: {\r\n    color: '#fff',\r\n    backgroundColor: deepOrange[500],\r\n    display: 'inline-block',\r\n    '& p': { margin: '10px 0' }\r\n  },\r\n  pos: {\r\n    marginBottom: 12\r\n  }\r\n});\r\n\r\nfunction Widget({ primaryText, secondaryText, count }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardContent>\r\n        <Avatar variant=\"square\" className={classes.square}>\r\n          <Typography component=\"p\">{primaryText[0].toUpperCase()}</Typography>\r\n        </Avatar>\r\n\r\n        <Typography className={classes.pos} color=\"textPrimary\">\r\n          {primaryText}\r\n        </Typography>\r\n        <Typography variant=\"h6\" component=\"p\">\r\n          {count}\r\n        </Typography>\r\n        <Typography color=\"textSecondary\">{secondaryText}</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nWidget.defaultProps = {\r\n  primaryText: 'Total Candidates',\r\n  secondaryText: 'Candidates',\r\n  count: 5\r\n};\r\n\r\nexport default Widget;\r\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Grid,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableFooter,\n  TablePagination\n} from '@material-ui/core';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Widget from './components/Widget';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    maxHeight: '100vh'\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0\n    }\n  },\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth\n    }\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up('sm')]: {\n      display: 'none'\n    }\n  },\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  content: {\n    flexGrow: 1,\n    textAlign: 'center',\n    padding: theme.spacing(3)\n  },\n  widgetGrid: {\n    maxHeight: '50%',\n    overflow: 'auto',\n    marginBottom: '0px'\n  },\n  tableHeader: {\n    margin: '12px 0',\n    textAlign: 'left',\n    padding: '15px 15px'\n  }\n}));\n\nfunction withAuth(Component) {\n  return props => {\n    const [token, setToken] = React.useState('');\n    React.useEffect(() => {\n      const token = sessionStorage.getItem('token');\n      setToken(token);\n      if (!token) window.location.href = '/login';\n    }, []);\n    return token && <Component {...props} />;\n  };\n}\n\nfunction App(props) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [rows, setRows] = React.useState([]);\n  const [widgetData, setWidgetData] = React.useState([]);\n\n  React.useEffect(() => {\n    const getData = async () => {\n      const response = await fetch('response.json');\n      const { data } = await response.json();\n      setRows(data);\n    };\n    getData();\n  }, []);\n\n  React.useEffect(() => {\n    let widgetRows = [{ primaryText: 'Total Candidates', count: rows.length }];\n    const groupBy = function(collection, key) {\n      return collection.reduce(function(rv, x) {\n        (rv[x[key]] = rv[x[key]] || []).push(x);\n        return rv;\n      }, {});\n    };\n    if (rows.length) {\n      const group = groupBy(rows, 'domain');\n      const r = Object.keys(group).map(g => ({\n        primaryText: g,\n        count: group[g].length\n      }));\n      widgetRows = widgetRows.concat(r);\n    }\n    setWidgetData(widgetRows);\n  }, [rows]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem('token');\n    window.location.href = '/login';\n  };\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      <Divider />\n      <List>\n        {[\n          { text: 'Dashboard', icon: <DashboardIcon /> },\n          { text: 'Logout', icon: <ExitToAppIcon />, action: logout }\n        ].map(({ text, icon, action = () => void 0 }) => (\n          <ListItem button key={text} onClick={() => action()}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            KEBOLI MRC\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={container}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            ModalProps={{\n              keepMounted: true // Better open performance on mobile.\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Grid container spacing={3} className={classes.widgetGrid}>\n          {widgetData.map((data, index) => (\n            <Grid item xs={3} key={index}>\n              <Widget {...data} />\n            </Grid>\n          ))}\n        </Grid>\n\n        <Paper className={classes.tableHeader}>\n          <Typography component=\"p\" color=\"primary\">\n            Scheduled List\n          </Typography>\n        </Paper>\n\n        <Paper>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Candidate Id</TableCell>\n                <TableCell align=\"right\">Name</TableCell>\n                <TableCell align=\"right\">Domain</TableCell>\n                <TableCell align=\"right\">Years of Exp</TableCell>\n                <TableCell align=\"right\">Recruiter Name</TableCell>\n                <TableCell align=\"right\">Interview Type</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map(row => (\n                  <TableRow key={row.name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.candidateId}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.name}</TableCell>\n                    <TableCell align=\"right\">{row.domain}</TableCell>\n                    <TableCell align=\"right\">{row.yearOfExperience}</TableCell>\n                    <TableCell align=\"right\">{row.recruiterName}</TableCell>\n                    <TableCell align=\"right\">{row.interviewType}</TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  colSpan={3}\n                  count={rows.length}\n                  rowsPerPage={rowsPerPage}\n                  rowsPerPageOptions={[]}\n                  page={page}\n                  onChangePage={handleChangePage}\n                  onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </Paper>\n      </main>\n    </div>\n  );\n}\n\nexport default withAuth(App);\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"#\">\r\n        KEBOLI\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1)\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2)\r\n  }\r\n}));\r\n\r\nexport default function Login() {\r\n  const classes = useStyles();\r\n  const [username, setUsername] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n  const [error, setError] = React.useState('');\r\n\r\n  const loginHandler = e => {\r\n    e.preventDefault();\r\n    if (username === 'Admin' && password === 'Admin@1234') {\r\n      sessionStorage.setItem('token', 'A123456');\r\n      window.location.href = '/';\r\n      return;\r\n    }\r\n    setError('Invalid Username or Password');\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <Typography component=\"p\" variant=\"body2\" color=\"error\">\r\n          {error}\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"username\"\r\n            label=\"User Name\"\r\n            name=\"username\"\r\n            autoFocus\r\n            onChange={e => setUsername(e.target.value)}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={e => setPassword(e.target.value)}\r\n          />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={loginHandler}\r\n          >\r\n            Sign In\r\n          </Button>\r\n        </form>\r\n      </div>\r\n      <Box mt={8}>\r\n        <Copyright />\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './Login';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nconst routing = (\n  <Router basename=\"/keboli-assignment\">\n    <Switch>\n      <Route exact path=\"/\" component={App}></Route>\n      <Route path=\"/login\" component={Login}></Route>\n    </Switch>\n  </Router>\n);\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}